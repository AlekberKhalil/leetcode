public class Solution {
    /**
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if(node == null)
            return null;
        //新旧点对应的map
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        List<UndirectedGraphNode> nodes = getNodes(node);
        
        //复制点
        for(UndirectedGraphNode cur : nodes){
            if(!map.containsKey(cur)){
                map.put(cur, new UndirectedGraphNode(cur.label));
            }
        }
        
        //复制边
        for(UndirectedGraphNode oldNode : nodes){
            if(oldNode.neighbors != null){
                UndirectedGraphNode newNode = map.get(oldNode);
                for(UndirectedGraphNode neighbor : oldNode.neighbors){
                    newNode.neighbors.add(map.get(neighbor));
                }
            }
        }
        
        return map.get(node);
    }
    
    public List<UndirectedGraphNode> getNodes(UndirectedGraphNode node){
        HashSet<UndirectedGraphNode> set = new HashSet<>();

        Queue<UndirectedGraphNode> q = new LinkedList<UndirectedGraphNode>();
        q.offer(node);
        set.add(node);//set没有重复，list有重复。
        
        while(!q.isEmpty()){
            UndirectedGraphNode cur = q.poll();

            if(cur.neighbors != null){
                for(UndirectedGraphNode neighbor : cur.neighbors){
                    if(!set.contains(neighbor)){
                         q.offer(neighbor);
                         set.add(neighbor);
                    }
                   
                }
            }
        }
        return new ArrayList<UndirectedGraphNode>(set);
    }
}
