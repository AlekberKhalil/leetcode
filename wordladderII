public class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, Set<String> wordList) {
        Set<String> visited = new HashSet<String>();
        Queue<String> q = new LinkedList<String>();
        HashMap<String,List<String>> father= new HashMap<String,List<String>>();
        List<List<String>> ret = new ArrayList<List<String>>();
        q.offer(beginWord);
        visited.add(beginWord);
        int cnt=q.size();
        boolean found=false;
        while(cnt>0 && !found){
            
            while(cnt>0){
                String cur= q.poll();
                cnt--;
                char[] charArr = cur.toCharArray();
                for(int i=0;i<charArr.length;i++){
                     char tempC = charArr[i];
                     for(char c='a';c<='z';c++){
                         if(c==tempC) continue;
                         charArr[i]=c;
                         String str = new String(charArr);
                         if(str.equals(endWord) ){
                             List<String> l = father.get(endWord);
                             if(l==null){
                               l = new ArrayList<String>();
                                l.add(cur);
                                father.put(endWord, l);
                             }
                            else{
                                l.add(str); 
                            }
                             
                             found=true;
                             break;
                         }
                         else if(!str.equals(beginWord)&&!visited.contains(str)&&wordList.contains(str)){
                             visited.add(str);
                             q.offer(str);
                             if(father.containsKey(str))
                                father.get(str).add(cur);
                            else{
                                List<String> l = new ArrayList<String>();
                                l.add(cur);
                                father.put(str, l);
                            }
                         }
                         
                     }
                     charArr[i]=tempC;
                }
            }
           cnt=q.size(); 
           
        }
        
        List<String> path= new ArrayList<String>();
        genPath(beginWord, path, father,ret, endWord);
        return ret;
    }
    
    public void genPath(String beginWord, List<String> path, HashMap<String,List<String>> father,List<List<String>> ret, String word){
        path.add(0,word);
        if(word.equals(beginWord)){
            ret.add(new ArrayList<String>(path));
            
        }else{
            if(father!=null && father.get(word)!=null){
                for(String child : father.get(word)){
                genPath(beginWord, path, father,ret, child);
                }
            }
            
        }
        
        path.remove(0);
    }
}
