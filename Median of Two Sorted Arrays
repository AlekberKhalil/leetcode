class Solution {
private:
int m,n;
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        m = nums1.size();
        n = nums2.size();
        int total = m+n;
        if(total==0)
            return -1;
        int k =total/2; 
        if(total%2>0){
            return kofArray(nums1,nums2,k+1);
        }else if((m+n)%2==0){
            return (kofArray(nums1,nums2,k)+kofArray(nums1,nums2,k+1))/2.0;
        }
    }
    int kofArray(vector<int>& nums1, vector<int>& nums2,int k){
        int i=0,j=0;
        while(k>0){
            if(m==0||i>m-1)
                return nums2[j+k-1];
            if(n==0||j>n-1)
                return nums1[i+k-1];
            if(nums1[i]>nums2[j]){
                j++;
                k--;
            }else if(nums1[i]<nums2[j]){
                i++;
                k--;
            }else{
                if(k-2>0){
                    i++;
                    j++;
                    k-=2;
                }else{
                    return nums1[i];
                }
            }
        }
        if(k==0)
            return min(nums2[--j],nums1[--i]);
    }
};
