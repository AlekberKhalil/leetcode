//cpp
class Solution {

private:
queue<int> q;
int m,n;
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty())
            return;
        m = board.size();
        n = board[0].size();
        for(int i=0;i<n;i++){
            bfs(0,i,board);
            bfs(m-1,i,board);
        }
        for(int j = 0;j<m;j++){
            bfs(j,0,board);
            bfs(j,n-1,board);
            
        }
        
        for(int i=0;i<m;i++)
        for(int j=0;j<n;j++){
            if(board[i][j]=='O')
                board[i][j]='X';
            else if(board[i][j]=='+')   
                board[i][j]='O';
        }
        
    }
    void bfs(int x, int y,vector<vector<char>>& board){
        isValid(x,y,board);
        while(!q.empty()){
                int old = q.front();
                q.pop();
                int nx = old/n;
                int ny = old%n;
                isValid(nx+1,ny,board);
                isValid(nx-1,ny,board);
                isValid(nx,ny+1,board);
                isValid(nx,ny-1,board);
            }
    }
    
    void isValid(int x, int y,vector<vector<char>>& board){
        if(x<0||x>=m||y<0||y>=n||board[x][y]!='O')
            return;
        board[x][y]='+';
        q.push(x*n+y);
    }
};
