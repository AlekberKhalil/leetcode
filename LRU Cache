
//一个双向链表，一个hashmap. hasmap里装key和Node. 链表里装Node. 每次操作这俩结构都要更新。
public class LRUCache {

    public class Node{
    int key;
    int value;
    Node prev;
    Node next;
    
    public Node(int key, int value){
        this.key=key;
        this.value=value;
        this.prev=null;
        this.next=null;
    }
    }
    
    int capacity;
    Node head;
    Node tail;
        
    HashMap<Integer,Node> hs= new HashMap<Integer,Node>();
    LinkedList<Node> lr= new LinkedList<Node>();
    
    public LRUCache(int capacity) {
        this.capacity=capacity;
        head = new Node(-1,-1);
        tail=new Node(-1,-1);
        head.next=tail;
        tail.prev=head;
        this.hs= new HashMap<Integer,Node>();
        this.lr= new LinkedList<Node>();
    }
    
    public int get(int key) {
        if(!hs.containsKey(key))
            return -1;
        Node current= hs.get(key);
        
        //将节点从当前位置删除
        current.next.prev=current.prev;
        current.prev.next = current.next;
        
        //节点加入最后
        moveToTail(current);
        return current.value;
    }
    
    public void put(int key, int value) {
        
        Node current;
        
        if(hs.containsKey(key)){
            current = hs.get(key);
            current.value=value;
            //get里有更新链表的位置
            get(key);
        }
        else{
            current= new Node(key,value);
            
            if(hs.size() == capacity){           
                hs.remove(head.next.key);
                head.next=head.next.next;
                head.next.prev=head;       
            }
             
            hs.put(key,current);
            moveToTail(current);
        }            
    }
    
    public void moveToTail(Node n){
        n.prev=tail.prev;
        tail.prev.next=n;        
        n.next=tail;
        tail.prev=n;
    }
}


/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
