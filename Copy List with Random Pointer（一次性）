/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null)
            return head;
        copyNext(head);
        copyRandom(head);
        return split(head);
    }
    
    public RandomListNode copyNext(RandomListNode head){
        RandomListNode dummy=new RandomListNode(-1);
        RandomListNode temp;
        dummy.next=head;
        while(head != null){
            temp= head.next;
            head.next=new RandomListNode(head.label);
            head.next.next=temp;
            head=temp;
        }
        return dummy.next;
    }
    
    public RandomListNode copyRandom(RandomListNode head){
        RandomListNode dummy = new RandomListNode(-1);
        dummy.next=head;
        while (head!=null){
            if(head.random!=null){
                head.next.random = head.random.next;
            }
            head=head.next.next;
        }
        return dummy.next;
    }
    
    public RandomListNode split(RandomListNode head){
        RandomListNode nHead = head.next;
        RandomListNode prev=new RandomListNode(-1);
        while(head!=null){
            prev=head.next;
            head.next=head.next.next;
            head=head.next;
            if(prev.next!=null) //缺了这一步
              prev.next=head.next;
            
        }
        return nHead;
    }
}
