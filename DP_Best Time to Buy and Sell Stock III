public class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length <= 1) 
            return 0;
        
        int K=2;
        int temp;
        int[][] f = new int[K+1][prices.length];
        
        //因为有i-1,k-1 所以都从1开始
        for(int k = 1;k<=K;k++){
            temp = -prices[0];
            for(int i=1;i<prices.length;i++){
            //f[k, ii] = max(f[k, ii-1], prices[ii] - prices[jj] + f[k-1, jj]) { jj in range of [0, ii-1] }
                f[k][i]=Math.max(f[k][i-1],temp+prices[i]);
                temp=Math.max(temp,f[k-1][i]-prices[i]);                
            }
        }
        return f[K][prices.length-1];
    }
}

//version 2
public class Solution {
    public int maxProfit(int[] prices) {
    //初始化
        int hold1 = Integer.MIN_VALUE, hold2 = Integer.MIN_VALUE;
        int release1 = 0, release2 = 0;
        for(int i : prices){
            hold1=Math.max(hold1,-i);
            release1=Math.max(release1,hold1+i);
            hold2=Math.max(hold2,release1-i);
            release2=Math.max(release2,hold2+i);
        }
        return release2;
    }
}

//version 3
//设状态 f (i)，表示区间 [0, i](0 ≤ i ≤ n − 1) 的最大利润，状态 g(i)，表示区间 [i, n − 1](0 ≤ i ≤ n − 1) 的最大利润，
//则最终答案为 max{f(i) + g(i)},0 ≤ i ≤ n − 1。
//允许在一天内买进又卖出，相当于不交易，因为题目的规定是最多两次，而不是一定要两次。
//将原数组变成差分数组，本题也可以看做是最大 m 子段和，m = 2，
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length<2)
            return 0;
        int[] f=new int[prices.length];
        int[] g=new int[prices.length];
        
        int ret=0;
        
        //min=prices[0] 啊！！从左到右，存前i最大的利润
        for(int i=1,min=prices[0];i<prices.length;i++){
            min=Math.min(min,prices[i]);
            f[i]=Math.max(f[i-1],prices[i]-min);//还是需要存前i最大的利润。
        }
        //max=prices[prices.length-1] 从右到左
        for(int j=prices.length-2,max=prices[prices.length-1];j>=0;j--){
            max=Math.max(max,prices[j]);
            g[j]=Math.max(g[j+1],max-prices[j]);
        }
        
        for(int i=0;i<prices.length;i++){
            ret=Math.max(ret,f[i]+g[i]);
        }
        
        return ret;
    }
}
